<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright The WildFly Authors
  ~ SPDX-License-Identifier: Apache-2.0
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.wildfly.tck</groupId>
        <artifactId>servlet-tck-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>servlet-tck-runner</artifactId>
    <name>WildFly: Jakarta Servlet TCK Runner</name>

    <properties>
        <!-- Configuration properties -->
        <client.keystore.path>${project.build.testOutputDirectory}/client-keystore.pkcs12</client.keystore.path>
        <client.truststore.path>${project.build.testOutputDirectory}/client-truststore.pkcs12</client.truststore.path>
        <client.cert.path>${project.build.testOutputDirectory}/client.cer</client.cert.path>

        <wildfly.skip>false</wildfly.skip>
    </properties>

    <dependencies>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>servlet-tck-runtime</artifactId>
            <version>${version.jakarta.servlet.tck}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>jakarta.annotation</groupId>
                    <artifactId>jakarta.annotation-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.arquillian.junit</groupId>
                    <artifactId>arquillian-junit-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>sigtest-maven-plugin</artifactId>
            <version>${version.jakarta.tck.sigtest-maven-plugin}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.test</groupId>
            <artifactId>arquillian-test-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- This is required for a hack to manipulate deployments to add missing classes and to add configuration
             files since all deployments seem to be marked with testable=false. See the WildFlyExtension
         -->
        <dependency>
            <groupId>org.jboss.arquillian.test</groupId>
            <artifactId>arquillian-test-impl-base</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.logmanager</groupId>
            <artifactId>jboss-logmanager</artifactId>
            <version>${version.org.jboss.logging.jboss-logmanager}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logging</groupId>
                    <artifactId>jboss-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Required as the Servlet TCK attempts to add libraries to the deployments. This implementation is already
             provided by WildFly, but we need to satisfy the TCK here. -->
        <dependency>
            <groupId>org.jboss.slf4j</groupId>
            <artifactId>slf4j-jboss-logmanager</artifactId>
            <version>${version.org.jboss.slf4j.slf4j-jboss-logmanager}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>jakarta.annotation</groupId>
                    <artifactId>jakarta.annotation-api</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>arquillian.xml</include>
                    <include>configure-server.cli</include>
                </includes>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <excludes>
                    <exclude>arquillian.xml</exclude>
                    <exclude>>configure-server.cli</exclude>
                </excludes>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <!-- Export the properties defined below so they can be used for the signature tests -->
                            <exportAntProperties>true</exportAntProperties>
                            <target>
                                <fileset id="sigTestClasspath"
                                         dir="${jboss.home}${file.separator}modules/system/layers/base/jakarta/">
                                    <include name="**/servlet/api/main/*.jar"/>
                                </fileset>
                                <pathconvert pathsep="," property="sigTestClasspath" refid="sigTestClasspath"/>
                                <!-- Find the Jakarta EE API's needed for the test class path -->
                                <fileset id="jakarta.api.libs"
                                         dir="${jboss.home}${file.separator}modules/system/layers/base/jakarta/">
                                    <include name="**/annotation/api/main/*.jar"/>
                                    <include name="**/servlet/api/main/*.jar"/>
                                </fileset>
                                <pathconvert pathsep="," property="jakarta.api.libs" refid="jakarta.api.libs"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>echo</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo message="sigTestClasspath=${sigTestClasspath}"/>
                                <echo message="jakarta.api.libs=${jakarta.api.libs}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <!-- In order to make the additionalClasspathElement work, we must disable the default test execution
                         and create a new execution.
                     -->
                    <execution>
                        <id>default-test</id>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>servlet-tck</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>
                                <dependenciesToScan>jakarta.tck:servlet-tck-runtime</dependenciesToScan>
                            </dependenciesToScan>
                            <!-- Include the libraries from the server on the test class path -->
                            <additionalClasspathElements>
                                <additionalClasspathElement>${jakarta.api.libs}</additionalClasspathElement>
                            </additionalClasspathElements>
                            <systemPropertyVariables>
                                <!-- The jimage.dir directory is required by signature tests. The sigTestClasspath is set in an
                                     an ant task which runs above in the maven-antrun-plugin.
                                 -->
                                <jimage.dir>${project.build.directory}/java-bundle</jimage.dir>
                                <sigTestClasspath>${sigTestClasspath}:${project.build.directory}/java-bundle/java.base</sigTestClasspath>

                                <!-- We use this on the client side, e.g. the surefire side, to configure logging -->
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                                <!-- if the servlet container doesn't support optional cross context -->
                                <servlet.tck.support.crossContext>true</servlet.tck.support.crossContext>
                                <!-- if the servlet container doesn't support optional http2 push -->
                                <servlet.tck.support.http2Push>true</servlet.tck.support.http2Push>
                                <!--
                                the slf4j impl to include within the deployed wars, default value is org.slf4j:slf4j-simple
                                -->
                                <servlet.tck.slf4jimpl>org.jboss.slf4j:slf4j-jboss-logmanager</servlet.tck.slf4jimpl>

                                <!-- These need to be set for the client side tests which use HTTPS connections. -->
                                <javax.net.ssl.keyStore>${client.keystore.path}</javax.net.ssl.keyStore>
                                <javax.net.ssl.keyStorePassword>changeit</javax.net.ssl.keyStorePassword>
                                <javax.net.ssl.trustStore>${client.truststore.path}</javax.net.ssl.trustStore>
                                <javax.net.ssl.trustStorePassword>changeit</javax.net.ssl.trustStorePassword>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>generate-key-pair</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <alias>cts</alias>
                            <keyalg>RSA</keyalg>
                            <keysize>2048</keysize>
                            <validity>365</validity>
                            <keystore>${client.keystore.path}</keystore>
                            <!-- The test expects this dname -->
                            <dname>CN=CTS, OU=Java Software, O=Sun Microsystems Inc., L=Burlington, ST=MA, C=US</dname>
                            <keypass>changeit</keypass>
                            <storepass>changeit</storepass>
                            <exts>
                                <ext>SAN=DNS:localhost,IP:127.0.0.1</ext>
                            </exts>
                            <verbose>true</verbose>
                        </configuration>
                    </execution>
                    <execution>
                        <id>export-cert</id>
                        <goals>
                            <goal>exportCertificate</goal>
                        </goals>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <alias>cts</alias>
                            <keystore>${client.keystore.path}</keystore>
                            <storepass>changeit</storepass>
                            <file>${client.cert.path}</file>
                            <verbose>true</verbose>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-cert</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <!-- Note this MUST happen after the CLI commands have executed to configure the certificate from the server -->
                        <phase>process-test-classes</phase>
                        <configuration>
                            <alias>cts</alias>
                            <keystore>${client.truststore.path}</keystore>
                            <keypass>changeit</keypass>
                            <noprompt>true</noprompt>
                            <trustcacerts>true</trustcacerts>
                            <file>${jboss.home}/standalone/configuration/server.cer</file>
                            <storepass>changeit</storepass>
                            <verbose>true</verbose>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>configure-server</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>execute-commands</goal>
                        </goals>
                        <configuration>
                            <jboss-home>${jboss.home}</jboss-home>
                            <offline>true</offline>
                            <scripts>
                                <script>${project.build.testOutputDirectory}/configure-server.cli</script>
                            </scripts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>